plugins {
    id 'java-library'
    id 'maven-publish'
    id "com.jfrog.bintray" version "1.8.4" apply(false)
}

dependencies {
    runtimeOnly 'org.jetbrains.kotlin:kotlin-script-runtime'
    implementation 'org.jetbrains.kotlin:kotlin-script-util'
    implementation 'org.jetbrains.kotlin:kotlin-compiler-embeddable'
    implementation 'org.jetbrains.kotlin:kotlin-scripting-compiler-embeddable'

    def maven_version = "3.5.0"
    implementation group: 'org.apache.maven', name: 'maven-resolver-provider', version: maven_version

    def maven_resolver_version = "1.4.2"
    implementation group: 'org.apache.maven.resolver', name: 'maven-resolver-api', version: maven_resolver_version
    implementation group: 'org.apache.maven.resolver', name: 'maven-resolver-impl', version: maven_resolver_version
    implementation group: 'org.apache.maven.resolver', name: 'maven-resolver-util', version: maven_resolver_version
    implementation group: 'org.apache.maven.resolver', name: 'maven-resolver-transport-http', version: maven_resolver_version
    implementation group: 'org.apache.maven.resolver', name: 'maven-resolver-transport-file', version: maven_resolver_version
    implementation group: 'org.apache.maven.resolver', name: 'maven-resolver-connector-basic', version: maven_resolver_version

}

kotlin {
    explicitApi()
}

def generatedSourceDir = new File(buildDir, "generated/src/main/kotlin")
sourceSets.main.kotlin.srcDirs += generatedSourceDir.absolutePath

task injectVersion() {
    doLast {
        def packageFolder = project.group.replace(".", "/")
        def versionFile = new File(generatedSourceDir, "$packageFolder/version.kt")
        if (!versionFile.parentFile.exists()) {
            versionFile.parentFile.mkdirs()
            versionFile.createNewFile()
        }
        versionFile.write(
                "package ${project.group}\n\n" +
                        "public object kts {\n\n" +
                        "   @JvmField\n" +
                        "   public val version: String = \"${project.version}\"\n\n" +
                        "}\n"
        )

    }
}

compileKotlin.dependsOn injectVersion

publishing {

    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier.set('sources')
        from sourceSets.main.allSource
    }

    publications {
        maven(MavenPublication) {
            from components.java
            artifact sourcesJar
        }
    }

}

if (hasProperty("bintrayUser") && hasProperty("bintrayKey")) {

    apply plugin: "com.jfrog.bintray"

    bintray {
        user = bintrayUser
        key = bintrayKey
        publish = true
        publications = ["maven"]
        pkg {
            repo = "mvn"
            name = "kts"
            websiteUrl = "https://github.com/markaren/kts"
            vcsUrl = "https://github.com/markaren/kts"
            licenses = ["MIT"]
        }
    }

}
